"""autogenerated by genpy from hubomsg/CanMessage.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CanMessage(genpy.Message):
  _md5sum = "8a0a761f0ea023e60de69eb361380cf7"
  _type = "hubomsg/CanMessage"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint16 mType
uint8 cmdType
uint8 bno
int32 r1
int32 r2
int32 r3
int32 r4
int32 r5
int32 r6
int32 r7
int32 r8

"""
  __slots__ = ['mType','cmdType','bno','r1','r2','r3','r4','r5','r6','r7','r8']
  _slot_types = ['uint16','uint8','uint8','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mType,cmdType,bno,r1,r2,r3,r4,r5,r6,r7,r8

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CanMessage, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.mType is None:
        self.mType = 0
      if self.cmdType is None:
        self.cmdType = 0
      if self.bno is None:
        self.bno = 0
      if self.r1 is None:
        self.r1 = 0
      if self.r2 is None:
        self.r2 = 0
      if self.r3 is None:
        self.r3 = 0
      if self.r4 is None:
        self.r4 = 0
      if self.r5 is None:
        self.r5 = 0
      if self.r6 is None:
        self.r6 = 0
      if self.r7 is None:
        self.r7 = 0
      if self.r8 is None:
        self.r8 = 0
    else:
      self.mType = 0
      self.cmdType = 0
      self.bno = 0
      self.r1 = 0
      self.r2 = 0
      self.r3 = 0
      self.r4 = 0
      self.r5 = 0
      self.r6 = 0
      self.r7 = 0
      self.r8 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_H2B8i.pack(_x.mType, _x.cmdType, _x.bno, _x.r1, _x.r2, _x.r3, _x.r4, _x.r5, _x.r6, _x.r7, _x.r8))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.mType, _x.cmdType, _x.bno, _x.r1, _x.r2, _x.r3, _x.r4, _x.r5, _x.r6, _x.r7, _x.r8,) = _struct_H2B8i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_H2B8i.pack(_x.mType, _x.cmdType, _x.bno, _x.r1, _x.r2, _x.r3, _x.r4, _x.r5, _x.r6, _x.r7, _x.r8))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.mType, _x.cmdType, _x.bno, _x.r1, _x.r2, _x.r3, _x.r4, _x.r5, _x.r6, _x.r7, _x.r8,) = _struct_H2B8i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_H2B8i = struct.Struct("<H2B8i")
