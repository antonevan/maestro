/* Auto-generated by genmsg_cpp for file /opt/ros/fuerte/stacks/maestro/hubomsg/msg/HuboHand.msg */
#ifndef HUBOMSG_MESSAGE_HUBOHAND_H
#define HUBOMSG_MESSAGE_HUBOHAND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "hubomsg/HuboJointState.h"
#include "hubomsg/HuboJointState.h"
#include "hubomsg/HuboJointState.h"
#include "hubomsg/HuboJointState.h"
#include "hubomsg/HuboJointState.h"

namespace hubomsg
{
template <class ContainerAllocator>
struct HuboHand_ {
  typedef HuboHand_<ContainerAllocator> Type;

  HuboHand_()
  : thumb()
  , index()
  , middle()
  , ring()
  , pinky()
  {
  }

  HuboHand_(const ContainerAllocator& _alloc)
  : thumb(_alloc)
  , index(_alloc)
  , middle(_alloc)
  , ring(_alloc)
  , pinky(_alloc)
  {
  }

  typedef  ::hubomsg::HuboJointState_<ContainerAllocator>  _thumb_type;
   ::hubomsg::HuboJointState_<ContainerAllocator>  thumb;

  typedef  ::hubomsg::HuboJointState_<ContainerAllocator>  _index_type;
   ::hubomsg::HuboJointState_<ContainerAllocator>  index;

  typedef  ::hubomsg::HuboJointState_<ContainerAllocator>  _middle_type;
   ::hubomsg::HuboJointState_<ContainerAllocator>  middle;

  typedef  ::hubomsg::HuboJointState_<ContainerAllocator>  _ring_type;
   ::hubomsg::HuboJointState_<ContainerAllocator>  ring;

  typedef  ::hubomsg::HuboJointState_<ContainerAllocator>  _pinky_type;
   ::hubomsg::HuboJointState_<ContainerAllocator>  pinky;


  typedef boost::shared_ptr< ::hubomsg::HuboHand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hubomsg::HuboHand_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct HuboHand
typedef  ::hubomsg::HuboHand_<std::allocator<void> > HuboHand;

typedef boost::shared_ptr< ::hubomsg::HuboHand> HuboHandPtr;
typedef boost::shared_ptr< ::hubomsg::HuboHand const> HuboHandConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::hubomsg::HuboHand_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::hubomsg::HuboHand_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace hubomsg

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hubomsg::HuboHand_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hubomsg::HuboHand_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hubomsg::HuboHand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e09ed47ff0eea79727916eba887d57d4";
  }

  static const char* value(const  ::hubomsg::HuboHand_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe09ed47ff0eea797ULL;
  static const uint64_t static_value2 = 0x27916eba887d57d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::hubomsg::HuboHand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hubomsg/HuboHand";
  }

  static const char* value(const  ::hubomsg::HuboHand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hubomsg::HuboHand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "HuboJointState thumb\n\
HuboJointState index\n\
HuboJointState middle\n\
HuboJointState ring\n\
HuboJointState pinky\n\
\n\
================================================================================\n\
MSG: hubomsg/HuboJointState\n\
string name\n\
float64 commanded\n\
float64 position\n\
float64 velocity\n\
float64 current\n\
float64 temperature\n\
int32 active\n\
int32 zeroed\n\
int32 homed\n\
int32 status\n\
";
  }

  static const char* value(const  ::hubomsg::HuboHand_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hubomsg::HuboHand_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.thumb);
    stream.next(m.index);
    stream.next(m.middle);
    stream.next(m.ring);
    stream.next(m.pinky);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct HuboHand_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hubomsg::HuboHand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::hubomsg::HuboHand_<ContainerAllocator> & v) 
  {
    s << indent << "thumb: ";
s << std::endl;
    Printer< ::hubomsg::HuboJointState_<ContainerAllocator> >::stream(s, indent + "  ", v.thumb);
    s << indent << "index: ";
s << std::endl;
    Printer< ::hubomsg::HuboJointState_<ContainerAllocator> >::stream(s, indent + "  ", v.index);
    s << indent << "middle: ";
s << std::endl;
    Printer< ::hubomsg::HuboJointState_<ContainerAllocator> >::stream(s, indent + "  ", v.middle);
    s << indent << "ring: ";
s << std::endl;
    Printer< ::hubomsg::HuboJointState_<ContainerAllocator> >::stream(s, indent + "  ", v.ring);
    s << indent << "pinky: ";
s << std::endl;
    Printer< ::hubomsg::HuboJointState_<ContainerAllocator> >::stream(s, indent + "  ", v.pinky);
  }
};


} // namespace message_operations
} // namespace ros

#endif // HUBOMSG_MESSAGE_HUBOHAND_H

