/* Auto-generated by genmsg_cpp for file /opt/ros/fuerte/stacks/maestro/hubomsg/msg/CanMessage.msg */
#ifndef HUBOMSG_MESSAGE_CANMESSAGE_H
#define HUBOMSG_MESSAGE_CANMESSAGE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace hubomsg
{
template <class ContainerAllocator>
struct CanMessage_ {
  typedef CanMessage_<ContainerAllocator> Type;

  CanMessage_()
  : mType(0)
  , cmdType(0)
  , bno(0)
  , r1(0)
  , r2(0)
  , r3(0)
  , r4(0)
  , r5(0)
  , r6(0)
  , r7(0)
  , r8(0)
  {
  }

  CanMessage_(const ContainerAllocator& _alloc)
  : mType(0)
  , cmdType(0)
  , bno(0)
  , r1(0)
  , r2(0)
  , r3(0)
  , r4(0)
  , r5(0)
  , r6(0)
  , r7(0)
  , r8(0)
  {
  }

  typedef uint16_t _mType_type;
  uint16_t mType;

  typedef uint8_t _cmdType_type;
  uint8_t cmdType;

  typedef uint8_t _bno_type;
  uint8_t bno;

  typedef int32_t _r1_type;
  int32_t r1;

  typedef int32_t _r2_type;
  int32_t r2;

  typedef int32_t _r3_type;
  int32_t r3;

  typedef int32_t _r4_type;
  int32_t r4;

  typedef int32_t _r5_type;
  int32_t r5;

  typedef int32_t _r6_type;
  int32_t r6;

  typedef int32_t _r7_type;
  int32_t r7;

  typedef int32_t _r8_type;
  int32_t r8;


  typedef boost::shared_ptr< ::hubomsg::CanMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hubomsg::CanMessage_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CanMessage
typedef  ::hubomsg::CanMessage_<std::allocator<void> > CanMessage;

typedef boost::shared_ptr< ::hubomsg::CanMessage> CanMessagePtr;
typedef boost::shared_ptr< ::hubomsg::CanMessage const> CanMessageConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::hubomsg::CanMessage_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::hubomsg::CanMessage_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace hubomsg

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hubomsg::CanMessage_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hubomsg::CanMessage_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hubomsg::CanMessage_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8a0a761f0ea023e60de69eb361380cf7";
  }

  static const char* value(const  ::hubomsg::CanMessage_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8a0a761f0ea023e6ULL;
  static const uint64_t static_value2 = 0x0de69eb361380cf7ULL;
};

template<class ContainerAllocator>
struct DataType< ::hubomsg::CanMessage_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hubomsg/CanMessage";
  }

  static const char* value(const  ::hubomsg::CanMessage_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hubomsg::CanMessage_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint16 mType\n\
uint8 cmdType\n\
uint8 bno\n\
int32 r1\n\
int32 r2\n\
int32 r3\n\
int32 r4\n\
int32 r5\n\
int32 r6\n\
int32 r7\n\
int32 r8\n\
\n\
";
  }

  static const char* value(const  ::hubomsg::CanMessage_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hubomsg::CanMessage_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hubomsg::CanMessage_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.mType);
    stream.next(m.cmdType);
    stream.next(m.bno);
    stream.next(m.r1);
    stream.next(m.r2);
    stream.next(m.r3);
    stream.next(m.r4);
    stream.next(m.r5);
    stream.next(m.r6);
    stream.next(m.r7);
    stream.next(m.r8);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CanMessage_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hubomsg::CanMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::hubomsg::CanMessage_<ContainerAllocator> & v) 
  {
    s << indent << "mType: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.mType);
    s << indent << "cmdType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmdType);
    s << indent << "bno: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bno);
    s << indent << "r1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r1);
    s << indent << "r2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r2);
    s << indent << "r3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r3);
    s << indent << "r4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r4);
    s << indent << "r5: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r5);
    s << indent << "r6: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r6);
    s << indent << "r7: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r7);
    s << indent << "r8: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r8);
  }
};


} // namespace message_operations
} // namespace ros

#endif // HUBOMSG_MESSAGE_CANMESSAGE_H

