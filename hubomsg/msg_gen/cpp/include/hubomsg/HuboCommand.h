/* Auto-generated by genmsg_cpp for file /opt/ros/fuerte/stacks/maestro/hubomsg/msg/HuboCommand.msg */
#ifndef HUBOMSG_MESSAGE_HUBOCOMMAND_H
#define HUBOMSG_MESSAGE_HUBOCOMMAND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "hubomsg/HuboJointCommand.h"

namespace hubomsg
{
template <class ContainerAllocator>
struct HuboCommand_ {
  typedef HuboCommand_<ContainerAllocator> Type;

  HuboCommand_()
  : joints()
  , num_joints(0)
  {
  }

  HuboCommand_(const ContainerAllocator& _alloc)
  : joints(_alloc)
  , num_joints(0)
  {
  }

  typedef std::vector< ::hubomsg::HuboJointCommand_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hubomsg::HuboJointCommand_<ContainerAllocator> >::other >  _joints_type;
  std::vector< ::hubomsg::HuboJointCommand_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hubomsg::HuboJointCommand_<ContainerAllocator> >::other >  joints;

  typedef int32_t _num_joints_type;
  int32_t num_joints;


  typedef boost::shared_ptr< ::hubomsg::HuboCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hubomsg::HuboCommand_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct HuboCommand
typedef  ::hubomsg::HuboCommand_<std::allocator<void> > HuboCommand;

typedef boost::shared_ptr< ::hubomsg::HuboCommand> HuboCommandPtr;
typedef boost::shared_ptr< ::hubomsg::HuboCommand const> HuboCommandConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::hubomsg::HuboCommand_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::hubomsg::HuboCommand_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace hubomsg

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hubomsg::HuboCommand_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hubomsg::HuboCommand_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hubomsg::HuboCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e1b182ddb50fa4986084202886606609";
  }

  static const char* value(const  ::hubomsg::HuboCommand_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe1b182ddb50fa498ULL;
  static const uint64_t static_value2 = 0x6084202886606609ULL;
};

template<class ContainerAllocator>
struct DataType< ::hubomsg::HuboCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hubomsg/HuboCommand";
  }

  static const char* value(const  ::hubomsg::HuboCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hubomsg::HuboCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "HuboJointCommand[] joints\n\
int32 num_joints\n\
\n\
================================================================================\n\
MSG: hubomsg/HuboJointCommand\n\
string name\n\
float64 position\n\
float64 velocity\n\
\n\
";
  }

  static const char* value(const  ::hubomsg::HuboCommand_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hubomsg::HuboCommand_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.joints);
    stream.next(m.num_joints);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct HuboCommand_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hubomsg::HuboCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::hubomsg::HuboCommand_<ContainerAllocator> & v) 
  {
    s << indent << "joints[]" << std::endl;
    for (size_t i = 0; i < v.joints.size(); ++i)
    {
      s << indent << "  joints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hubomsg::HuboJointCommand_<ContainerAllocator> >::stream(s, indent + "    ", v.joints[i]);
    }
    s << indent << "num_joints: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_joints);
  }
};


} // namespace message_operations
} // namespace ros

#endif // HUBOMSG_MESSAGE_HUBOCOMMAND_H

