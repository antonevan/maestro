/* Auto-generated by genmsg_cpp for file /opt/ros/fuerte/stacks/maestro/hubomsg/msg/AchCommand.msg */
#ifndef HUBOMSG_MESSAGE_ACHCOMMAND_H
#define HUBOMSG_MESSAGE_ACHCOMMAND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace hubomsg
{
template <class ContainerAllocator>
struct AchCommand_ {
  typedef AchCommand_<ContainerAllocator> Type;

  AchCommand_()
  : commandName()
  , jointName()
  {
  }

  AchCommand_(const ContainerAllocator& _alloc)
  : commandName(_alloc)
  , jointName(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _commandName_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  commandName;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _jointName_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  jointName;


  typedef boost::shared_ptr< ::hubomsg::AchCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hubomsg::AchCommand_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AchCommand
typedef  ::hubomsg::AchCommand_<std::allocator<void> > AchCommand;

typedef boost::shared_ptr< ::hubomsg::AchCommand> AchCommandPtr;
typedef boost::shared_ptr< ::hubomsg::AchCommand const> AchCommandConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::hubomsg::AchCommand_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::hubomsg::AchCommand_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace hubomsg

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hubomsg::AchCommand_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hubomsg::AchCommand_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hubomsg::AchCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "70a66f2cb750752eb65c63fd2693f894";
  }

  static const char* value(const  ::hubomsg::AchCommand_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x70a66f2cb750752eULL;
  static const uint64_t static_value2 = 0xb65c63fd2693f894ULL;
};

template<class ContainerAllocator>
struct DataType< ::hubomsg::AchCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hubomsg/AchCommand";
  }

  static const char* value(const  ::hubomsg::AchCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hubomsg::AchCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string commandName\n\
string jointName\n\
\n\
";
  }

  static const char* value(const  ::hubomsg::AchCommand_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hubomsg::AchCommand_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.commandName);
    stream.next(m.jointName);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AchCommand_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hubomsg::AchCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::hubomsg::AchCommand_<ContainerAllocator> & v) 
  {
    s << indent << "commandName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.commandName);
    s << indent << "jointName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.jointName);
  }
};


} // namespace message_operations
} // namespace ros

#endif // HUBOMSG_MESSAGE_ACHCOMMAND_H

